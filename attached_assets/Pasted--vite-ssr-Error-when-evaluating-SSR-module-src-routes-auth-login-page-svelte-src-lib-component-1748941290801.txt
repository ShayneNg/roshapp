[vite] (ssr) Error when evaluating SSR module /src/routes/auth/login/+page.svelte: src/lib/components/forms/AuthForm.svelte:214:0 `</script>` attempted to close an element that was not open
https://svelte.dev/e/element_invalid_closing_tag
  Plugin: vite-plugin-svelte
  File: src/lib/components/forms/AuthForm.svelte:214:0
   212 |  <!-- Social login options (e.g. Google, GitHub) -->
   213 |  <AuthOptions />
   214 |  </script>
          ^
[Error [CompileError]: src/lib/components/forms/AuthForm.svelte:214:0 `</script>` attempted to close an element that was not open
https://svelte.dev/e/element_invalid_closing_tag] {
  id: 'src/lib/components/forms/AuthForm.svelte',
  frame: ' 212 |  <!-- Social login options (e.g. Google, GitHub) -->\n' +
    ' 213 |  <AuthOptions />\n' +
    ' 214 |  </script>\n' +
    '        ^',
  code: 'element_invalid_closing_tag',
  loc: {
    line: 214,
    column: 0,
    file: 'src/lib/components/forms/AuthForm.svelte'
  },
  plugin: 'vite-plugin-svelte',
  pluginCode: '<script lang="ts">\n' +
    '  // Emits custom events (not used here, but good practice for form components)\n' +
    "  import { createEventDispatcher } from 'svelte';\n" +
    '\n' +
    '  // Zod schema for client-side validation (optional but clean)\n' +
    "  import { z } from 'zod';\n" +
    '\n' +
    '  // UI components (ShadCN-style)\n' +
    "  import { Button } from '$lib/components/ui/button';\n" +
    "  import { Input } from '$lib/components/ui/input';\n" +
    "  import { Label } from '$lib/components/ui/label';\n" +
    '\n' +
    '  // Toast notification system\n' +
    "  import { toast } from 'svelte-sonner';\n" +
    '\n' +
    '  // Social login buttons (e.g. Google, GitHub)\n' +
    "  import AuthOptions from '$lib/components/design/authOptions.svelte';\n" +
    '\n' +
    '  // Used for programmatic navigation\n' +
    "  import { goto } from '$app/navigation';\n" +
    '\n' +
    '  // Enables progressive form enhancement (SvelteKit magic)\n' +
    "  import { enhance } from '$app/forms';\n" +
    '\n' +
    '  // For access to URL parameters or SSR values\n' +
    "  import { page } from '$app/stores';\n" +
    '\n' +
    '  // Props passed from the page\n' +
    "  export let type: 'login' | 'register' = 'login';\n" +
    '  export let csrf: string; // passed from `+page.server.ts`\n' +
    '\n' +
    '  let loading = false; // disables submit button and shows spinner\n' +
    '\n' +
    '  // Form validation schema (used optionally here)\n' +
    '  const schema = z.object({\n' +
    "    email: z.string().email({ message: 'Invalid email format' }),\n" +
    "    password: z.string().min(6, { message: 'Password too short' })\n" +
    '  });\n' +
    '\n' +
    '  // Form data structure\n' +
    '  let form = {\n' +
    "    email: '',\n" +
    "    username: '',\n" +
    "    password: '',\n" +
    "    confirmPassword: ''\n" +
    '  };\n' +
    '\n' +
    '  // Error display logic\n' +
    "  let errorMessage = '';\n" +
    '  let showError = false;\n' +
    '\n' +
    "  // Useful if you want to emit 'success' or 'fail' to a parent\n" +
    '  const dispatch = createEventDispatcher();\n' +
    '\n' +
    '  // Optional reference to the form element itself\n' +
    '  let formEl: HTMLFormElement;\n' +
    '\n' +
    '  /**\n' +
    "   * Handles enhanced form submission via SvelteKit's use:enhance\n" +
    '   */\n' +
    '  function handleFormEnhance() {\n' +
    '    return async ({ result, update }: { result: any; update: any }) => {\n' +
    "      console.log('üîç FORM DEBUG - Form submission result:', result);\n" +
    "      console.log('üîç FORM DEBUG - CSRF token being sent:', csrf);\n" +
    '      loading = true;\n' +
    '\n' +
    '      // SUCCESS ‚Üí Redirect based on role\n' +
    "      if (result.type === 'success' && result.data?.success === true) {\n" +
    '        showError = false;\n' +
    "        errorMessage = '';\n" +
    "        toast.success(result.data.message || 'Welcome back!');\n" +
    '\n' +
    '        const role = result.data.role;\n' +
    '        setTimeout(() => {\n' +
    "          if (role === 'staff') goto('/staff');\n" +
    "          else if (role === 'admin' || role === 'manager') goto('/app');\n" +
    "          else if (role === 'ceo' || role === 'developer') goto('/protected');\n" +
    "          else goto('/customer'); // fallback if no role set\n" +
    '        }, 800);\n' +
    '\n' +
    '      // VALIDATION FAILURE (from +page.server.ts)\n' +
    "      } else if (result.type === 'failure' || result.data?.success === false) {\n" +
    "        errorMessage = result.data?.message || 'Login failed';\n" +
    '        showError = true;\n' +
    '        toast.error(errorMessage);\n' +
    '\n' +
    '      // SERVER ERROR\n' +
    "      } else if (result.type === 'error') {\n" +
    "        errorMessage = 'An unexpected error occurred';\n" +
    '        showError = true;\n' +
    '        toast.error(errorMessage);\n' +
    '      }\n' +
    '\n' +
    '      loading = false;\n' +
    '      await update(); // refresh form state\n' +
    '    };\n' +
    '  }\n' +
    '\n' +
    '  /**\n' +
    '   * Clear errors when user types again\n' +
    '   */\n' +
    '  function clearErrors() {\n' +
    '    if (showError) {\n' +
    '      showError = false;\n' +
    "      errorMessage = '';\n" +
    '    }\n' +
    '  }\n' +
    '</script>\n' +
    '\n' +
    '<!-- CSRF protection & enhanced form submission -->\n' +
    '<form method="POST" use:enhance={handleFormEnhance} class="space-y-5" bind:this={formEl}>\n' +
    '  <!-- Secure CSRF token from server -->\n' +
    `  <input type="hidden" name="csrf" value={csrf || ''} />\n` +
    '  <!-- Dynamic type field based on form type prop -->\n' +
    '  <input type="hidden" name="type" value={type} />\n' +
    '\n' +
    '  <!-- Error message block -->\n' +
    '  {#if showError}\n' +
    '    <div class="p-3 text-sm text-red-600 bg-red-50 border border-red-200 rounded-md">\n' +
    '      {errorMessage}\n' +
    '    </div>\n' +
    '  {/if}\n' +
    '\n' +
    '  <!-- Always required: Email -->\n' +
    '  <div class="space-y-2">\n' +
    '    <Label for="email">Email</Label>\n' +
    '    <Input\n' +
    '      id="email"\n' +
    '      name="email"\n' +
    '      type="email"\n' +
    '      placeholder="john.doe@example.com"\n' +
    '      bind:value={form.email}\n' +
    '      on:input={clearErrors}\n' +
    '      required\n' +
    '    />\n' +
    '  </div>\n' +
    '\n' +
    '  <!-- Only for register: Username -->\n' +
    "  {#if type === 'register'}\n" +
    '    <div class="space-y-2">\n' +
    '      <Label for="username">Username</Label>\n' +
    '      <Input\n' +
    '        id="username"\n' +
    '        name="username"\n' +
    '        type="text"\n' +
    '        placeholder="@JDoe"\n' +
    '        bind:value={form.username}\n' +
    '        on:input={clearErrors}\n' +
    "        required={type === 'register'}\n" +
    '      />\n' +
    '    </div>\n' +
    '  {/if}\n' +
    '\n' +
    '  <!-- Always required: Password -->\n' +
    '  <div class="space-y-2">\n' +
    '    <Label for="password">Password</Label>\n' +
    '    <Input\n' +
    '      id="password"\n' +
    '      name="password"\n' +
    '      type="password"\n' +
    '      placeholder="password"\n' +
    '      bind:value={form.password}\n' +
    '      on:input={clearErrors}\n' +
    '      required\n' +
    '    />\n' +
    '  </div>\n' +
    '\n' +
    '  <!-- Only for register: Confirm Password -->\n' +
    "  {#if type === 'register'}\n" +
    '    <div class="space-y-2">\n' +
    '      <Label for="confirm-password">Re-type Password</Label>\n' +
    '      <Input\n' +
    '        id="confirm-password"\n' +
    '        name="confirmPassword"\n' +
    '        type="password"\n' +
    '        placeholder="Re-type password"\n' +
    '        bind:value={form.confirmPassword}\n' +
    '        on:input={clearErrors}\n' +
    "        required={type === 'register'}\n" +
    '      />\n' +
    '    </div>\n' +
    '\n' +
    '    {#if form.password && form.confirmPassword && form.password !== form.confirmPassword}\n' +
    '      <p class="text-red-500 text-xs italic">Passwords do not match.</p>\n' +
    '    {/if}\n' +
    '  {/if}\n' +
    '\n' +
    '\n' +
    '  <!-- Submit button -->\n' +
    '  <div class="space-y-2">\n' +
    '    <Button class="w-full mt-2" type="submit" disabled={loading}>\n' +
    '      {#if loading}\n' +
    '        <span class="animate-spin mr-2">‚è≥</span>\n' +
    '      {/if}\n' +
    "      {type === 'login' ? 'Login' : 'Register'}\n" +
    '    </Button>\n' +
    '  </div>\n' +
    '</form>\n' +
    '\n' +
    '<!-- Divider for social login -->\n' +
    '<div class="relative">\n' +
    '  <div class="absolute inset-0 flex items-center">\n' +
    '    <span class="w-full border-t"></span>\n' +
    '  </div>\n' +
    '  <div class="relative flex justify-center text-xs uppercase">\n' +
    '    <span class="bg-background text-muted-foreground px-2">\n' +
    '      Or continue with\n' +
    '    </span>\n' +
    '  </div>\n' +
    '</div>\n' +
    '\n' +
    '<!-- Social login options (e.g. Google, GitHub) -->\n' +
    '<AuthOptions />\n' +
    '</script>',
  runnerError: Error: RunnerError
      at reviveInvokeError (file:///home/runner/workspace/node_modules/.pnpm/vite@6.3.4_@types+node@22.15.3_jiti@2.4.2_lightningcss@1.29.2_sass-embedded@1.87.0_yaml@2.7.1/node_modules/vite/dist/node/module-runner.js:552:18)
      at Object.invoke (file:///home/runner/workspace/node_modules/.pnpm/vite@6.3.4_@types+node@22.15.3_jiti@2.4.2_lightningcss@1.29.2_sass-embedded@1.87.0_yaml@2.7.1/node_modules/vite/dist/node/module-runner.js:635:15)
      at async SSRCompatModuleRunner.getModuleInformation (file:///home/runner/workspace/node_modules/.pnpm/vite@6.3.4_@types+node@22.15.3_jiti@2.4.2_lightningcss@1.29.2_sass-embedded@1.87.0_yaml@2.7.1/node_modules/vite/dist/node/module-runner.js:1205:73)
      at async request (file:///home/runner/workspace/node_modules/.pnpm/vite@6.3.4_@types+node@22.15.3_jiti@2.4.2_lightningcss@1.29.2_sass-embedded@1.87.0_yaml@2.7.1/node_modules/vite/dist/node/module-runner.js:1227:88)
      at async eval (/home/runner/workspace/src/routes/auth/login/+page.svelte:4:173)
      at async ESModulesEvaluator.runInlinedModule (file:///home/runner/workspace/node_modules/.pnpm/vite@6.3.4_@types+node@22.15.3_jiti@2.4.2_lightningcss@1.29.2_sass-embedded@1.87.0_yaml@2.7.1/node_modules/vite/dist/node/module-runner.js:1062:5)
      at async SSRCompatModuleRunner.directRequest (file:///home/runner/workspace/node_modules/.pnpm/vite@6.3.4_@types+node@22.15.3_jiti@2.4.2_lightningcss@1.29.2_sass-embedded@1.87.0_yaml@2.7.1/node_modules/vite/dist/node/module-runner.js:1284:61)
      at async SSRCompatModuleRunner.directRequest (file:///home/runner/workspace/node_modules/.pnpm/vite@6.3.4_@types+node@22.15.3_jiti@2.4.2_lightningcss@1.29.2_sass-embedded@1.87.0_yaml@2.7.1/node_modules/vite/dist/node/chunks/dep-Bn81Esdm.js:25274:23)
      at async SSRCompatModuleRunner.cachedRequest (file:///home/runner/workspace/node_modules/.pnpm/vite@6.3.4_@types+node@22.15.3_jiti@2.4.2_lightningcss@1.29.2_sass-embedded@1.87.0_yaml@2.7.1/node_modules/vite/dist/node/module-runner.js:1180:76)
      at async SSRCompatModuleRunner.import (file:///home/runner/workspace/node_modules/.pnpm/vite@6.3.4_@types+node@22.15.3_jiti@2.4.2_lightningcss@1.29.2_sass-embedded@1.87.0_yaml@2.7.1/node_modules/vite/dist/node/module-runner.js:1117:12)
}
